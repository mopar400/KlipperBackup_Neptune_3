#------------------------------------------------------------------------
#########################################################################
#   Macros
#########################################################################

######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT

[gcode_macro START_PRINT]
description: Start Print
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    Bed_Mesh_Profile Load=default # Load default Bed Mesh
    M140 S{BED_TEMP}              # Start bed heating
    G28                           # Home all axes
    G92 E0                        # Reset Extruder
    G1 Z4.0 F3000                 # Move Z Axis up 4mm
    # G90                         # Use absolute coordinates
    # SET_GCODE_OFFSET Z=0.0      # Reset the G-Code Z offset (adjust Z offset if needed)
    # Z_TILT_ADJUST               # Gantry Square
    # BED_MESH_CALIBRATE          # ABL Calibrate Bed
    # G1 Z10 F3000                # Move the nozzle near the bed
    # G1 Z1 F300                  # Move the nozzle very close to the bed
    M190 S{BED_TEMP}              # Wait for bed to reach temperature
    M109 S{EXTRUDER_TEMP}         # Set and wait for nozzle to reach temperature
    G1 X4 Y7 Z0.1 F5000           # Move to start position
    G1 X100 Y7 Z0.1 F1500 E20     # Draw the first line
    G1 X100 Y7.3 Z0.1 F5000       # Move to side a little
    G1 X4 Y7.3 Z0.1 F1500 E30     # Draw the second line
    # G1 E-0.5                    # Retract 0.5mm
    G92 E0                        # Reset Extruder
    G1 Z2 F3000                   # Move Z Axis up 2mm
    G1 X10 Y20 Z0.3 F5000         # Move over to prevent blob squish

[gcode_macro END_PRINT]
description: End Print
gcode:
     # Move nozzle away from print while retracting
    G91 # Relative Positioning
    G1 E-2 F2700     # Retract 2mm
    G1 Z5 F3000      # Raise nozzle by 5mm
    G1 X-2 Y-2       # Move X & Y out of the way a little
    G90              # Absolute positing
    G1 X0            # Move X to home 
    G1 Y225          # Present print
 #                   # Turn off bed, extruder, and fan
    M140 S0          # Turn off Heat Bed
    M104 S0          # Turn off Hot End
    M106 S0          # Turn off fan
    # SAVE_IF_SET    # SAVE_CONFIG if a mesh was probed in START_PRINT
    M84 X Y Z        #Disable steppers

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
description: Change Filament
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

#------------------------------------------------------------------------

[gcode_macro TARE_PROBE]
description: Tare Probe
gcode:
    G4 P250

#------------------------------------------------------------------------

[gcode_macro M420]
description: Load the default bed mesh
gcode:
  BED_MESH_PROFILE LOAD=default

  #------------------------------------------------------------------------

[gcode_macro CLEAN_NOZZLE]
description: Clean the Nozzle
variable_start_x: 120
variable_start_y: 217
variable_start_z: 30
variable_wipe_dist: -50
variable_wipe_qty: 10
variable_wipe_spd: 200
variable_raise_distance: 35 

gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
 G1 Z 50
   G28
 {% endif %}
 
 G90                               ; absolute positioning
 ## Move nozzle to start position
 G1 Z{raise_distance}

 G1 X{start_x} Y{start_y} F6000
  G1 Z{start_z} F1500
 
 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 ## Raise nozzle
 G1 Z{raise_distance}
 G1 y0
 G1 x0
 G1 z10

 #------------------------------------------------------------------------

#[homing_override]
#axes: xyz
#gcode:
#    G90 #absolute
#    {% set flag_O = params.O|default("false") %}
#    {% set flag_X = params.X|default("false") %}
#    {% set flag_Y = params.Y|default("false") %}
#    {% set flag_Z = params.Z|default("false") %}
#    {% if (flag_Y == "false" and flag_X == "false" and flag_Z == "false") %}
#        {% set flag_X = "true" %}
#        {% set flag_Y = "true" %}
#        {% set flag_Z = "true" %}
#    {% endif %}
#    {% if flag_O !="false" and 'x' in printer.toolhead.homed_axes %}
#        {% set flag_X = "false" %}
#    {% endif %}
#    {% if flag_O !="false" and 'y' in printer.toolhead.homed_axes %}
#        {% set flag_Y = "false" %}
#    {% endif %}
#    {% if flag_O !="false" and 'z' in printer.toolhead.homed_axes %}
#        {% set flag_Z = "false" %}
#    {% endif %}
#    
#    {% if (flag_X !="false" or flag_Y !="false" or flag_Z !="false") %}
#        {% if 'z' not in printer.toolhead.homed_axes %}
#            FORCE_MOVE STEPPER=stepper_z DISTANCE=5 VELOCITY=10 # Raise Z
#        {% else %}
#            G91 # relative
#            G0 Z5 F600
#            G90 # absolute
#        {% endif %}
#    {% endif %}
#    {% if (flag_Y != "false") or ((flag_X != "false" or flag_Z != "false") and 'y' not in printer.toolhead.homed_axes) %}
#         SENSORLESS_HOME_Y
#    {% endif %}
#    {% if (flag_X != "false") or (flag_Z != "false" and 'x' not in printer.toolhead.homed_axes) %}
#         G0 Y50 F3000  # Move Y to safe X
#         SENSORLESS_HOME_X
#    {% endif %}
#    {% if flag_Z != "false" %}
#         {% set bltouch = printer.configfile.settings['bltouch'] %}
#         G0 X{200 - bltouch.x_offset} Y{195 - bltouch.y_offset} F3600 #Move XY to safe Z
#         G28 Z
#         G0 Z10 F1800  
#    {% endif %}

#------------------------------------------------------------------------

[gcode_macro PROBE_RESET]
description: Probe Reset
gcode:
	{action_respond_info("Reset")}
    G4 P1000
	{action_respond_info("Start")}

#------------------------------------------------------------------------  

[gcode_shell_command backup_to_github]
command: sh /home/mks/backup.sh
timeout: 30
verbose: True

[gcode_macro GITHUB_BACKUP]
description: Backup Config Files to GitHub
gcode:
    RUN_SHELL_COMMAND CMD=backup_to_github

#------------------------------------------------------------------------ 

[gcode_macro DUMP_WARNINGS]
#
# DUMP_WARNINGS
#
# Parse the printer config file and dump any warnings to the console
#
description: Debug: Print all warning messages from klipper
gcode:
  {% if 'warnings' not in printer.configfile %}
      {action_respond_info("klipper to old! Please update klipper first and run again")}
  {% else %}
    {% set parameters = ["printer.configfile.warnings:"] %}
    {% for warning in printer.configfile.warnings %}
      {% set parameters = parameters.append("%s -> %s -> %s\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}
    {% endfor %}
    {action_respond_info(parameters|join("\n"))}
  {% endif %}

#------------------------------------------------------------------------ 

[gcode_macro HEATER_TEST]
#
# HEATER_TEST
#
# Perform a number of heating/cooling cycles on a heater
#
description: Cycle a heater to TEMP for DELAY seconds CYCLES times, allowing to cool to MIN between cycles
gcode:
    {% set TARGET = params.TARGET|default(160)|int %}
    {% set DELAY = params.DELAY|default(120)|int %}
    {% set CYCLES = params.CYCLES|default(5)|int %}
    {% set MIN = params.MIN|default(45)|int %}
    {% set HEATER = params.HEATER|default("extruder") %}

    {action_respond_info ("HEATER_TEST HEATER=%s TARGET=%d MIN=%d DELAY=%d CYCLES=%d" % ( HEATER, TARGET, MIN, DELAY, CYCLES ))}

    {% for i in range(CYCLES) %}
        M118 Cycle {i + 1} of {CYCLES}
        STATUS_HEATING
        M118 Heating {HEATER} to {TARGET}C...
        SET_HEATER_TEMPERATURE HEATER={HEATER} TARGET={TARGET}
        TEMPERATURE_WAIT SENSOR={HEATER} MINIMUM={TARGET}
        STATUS_BUSY
        M118 Reached {TARGET}C, holding for {DELAY} seconds...
        G4 P{DELAY * 1000}
        M118 Turn off {HEATER}, waiting until it cools to {MIN}C for next cycle...
        SET_HEATER_TEMPERATURE HEATER={HEATER} TARGET=0
        TEMPERATURE_WAIT SENSOR={HEATER} MAXIMUM={MIN}
    {% endfor %}
    M118 Heater test of {HEATER} complete.
    STATUS_READY

#------------------------------------------------------------------------

[gcode_macro HOME_IF_NEEDED]
#
# HOME_IF_NEEDED
#
# Perform a homing action only if one of the axes isn't homed.
#
description: Conditional home (i.e., home only if not homed already)
gcode:

    {% set verbose = params.VERBOSE|default(False) %}

    {% if not (('xy' in printer.toolhead.homed_axes) or ('z' in printer.toolhead.homed_axes)) %}
        {% if verbose %}
            { action_respond_info("Homing!") }
        {% endif %}
        G28
    {% endif %}

#------------------------------------------------------------------------

[gcode_macro LOAD_FILAMENT]
#
# LOAD_FILAMENT
#
# Heat to 200Â°C then prime the nozzle
description: Load filament (heat nozzle if necessary)
gcode:
   M117 Loading filament...
   {% if printer[printer.toolhead.extruder].temperature < 200 %}
   STATUS_HEATING
   M117 Heating hotend...
   SET_HEATER_TEMPERATURE HEATER='extruder' TARGET = 200
   TEMPERATURE_WAIT SENSOR='extruder' MINIMUM = 200
   {%endif%}
   STATUS_BUSY
   M117 Loading filament...
   M83                            ; set extruder to relative
   G1 E40 F300                    ; slower extrusion for hotend path
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
   UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION = 10
   STATUS_READY
    
#------------------------------------------------------------------------

[gcode_macro MAINTENANCE]
#
# MAINTENANCE
#
# Move the toolhead to 1/2 max above the bed and the front centre
#
description: move the toolhead to a convenient position for working on it
gcode:

  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

  {% set mid_x = max_x / 2.0 %}
  {% set z50 = max_z * 0.5 %}

  STATUS_BUSY
  HOME_IF_NEEDED
  G0 X{mid_x} Y0 Z{z50} F10000
  M84
  STATUS_MAINTENANCE

#------------------------------------------------------------------------

[gcode_macro PA_CAL]
# Klipper pressure advance line calibration macro.
# Usage: PA_CAL BED=100 EXTRUDER=240 PA_START=0.0 PA_STOP=0.1 PA_STEPS=20 NOZZLE=0.4
# Or you can execute with no parameters, which will use values from printer.cfg and saved_variables.cfg.

# Based on http://realdeuce.github.io/Voron/PA/pressure_advance.html
# Sourced from u/Deepsiks, assisted by u/imoftendisgruntled, u/scul86, and thanks to u/beansisfat, u/stray_r
# Cleaned up and moved to using saved_variables.cfg by u/jibbsisme
# Fully parameterized and extended by u/ksanislo

description: Tune Pressure Advance
gcode:
  # saved_variables.cfg
  {% set svv = printer.save_variables.variables %}

  # macro parameters
  {% set BED = params.BED|default(svv.pa_bed_temp)|int %}
  {% set CHAMBER = params.CHAMBER|default(svv.pa_chamber_temp)|int %}
  {% set EXTRUDER = params.EXTRUDER|default(svv.pa_extruder_temp)|int %}
  {% set PA_START = params.PA_START|default(svv.pa_start)|float %}
  {% set PA_STOP = params.PA_STOP|default(svv.pa_stop)|float %}
  {% set PA_STEPS = params.PA_STEPS|default(svv.pa_steps)|int %}
  {% set NOZZLE = params.NOZZLE|default(printer.configfile.config["extruder"]["nozzle_diameter"])|float %}

  # load variables
  {% set FD = printer.configfile.config["extruder"]["filament_diameter"]|float %}
  {% set AR = svv.pa_accel|default(3000) %}
  {% set DR = svv.pa_accel_to_decel|default(1500) %}
  {% set SL = svv.pa_slow_length|default(20) %}
  {% set FL = svv.pa_fast_length|default(40) %}
  {% set BL = svv.pa_between_lines|default(5) %}
  {% set MS = svv.pa_move_speed|default(300)*60 %}
  {% set SS = svv.pa_slow_speed|default(20)*60 %}
  {% set FS = svv.pa_fast_speed|default(120)*60 %}
  {% set ZS = svv.pa_z_speed|default(20)*60 %}
  {% set RS = svv.pa_retract_speed|default(35)*60 %}
  {% set RD = svv.pa_retract_dist|default(0.4) %}
  {% set LH = svv.pa_layer_height|default(0.20) %}
  {% set LR = svv.pa_line_ratio|default(1.25) %}
  {% set ER = svv.pa_extrude_ratio|default(1) %}
  {% set BE = svv.pa_bold_extrude|default(1.1)|float %}
  {% set EF = svv.pa_enable_frame|default(1) %}
  {% set EM = svv.pa_enable_markers|default(1) %}
  {% set PV = svv.pa_print_values|default(1) %}
  {% set PH = svv.pa_print_height|default(4) %}
  {% set ML = svv.pa_marker_length|default(BL*2) %}
  {% set DU = svv.pa_draw_underline|default(1) %}
  {% set UO = svv.pa_underline_overlap|default(0.25)|float %}
  {% set PP = svv.pa_precision|default("%.3f") %}

  {% set PX = PH/4 %}
  # calculated variables
  {% if printer.configfile.config['printer']['kinematics'] == 'delta' %}
    {% set X_MID = 0.0|float %}
    {% set Y_MID = 0.0|float %}
  {% else %}
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
  {% endif %}
  {% set STARTX = X_MID - (((SL*2)+FL)/2) %}
  {% set STARTY = Y_MID - (PA_STEPS * BL / 2.0) %}
  {% set PA_STEP = (PA_STOP - PA_START) / PA_STEPS|float %}
  {% set LINE_WIDTH = NOZZLE * LR|float %}
  {% set ERAT = LINE_WIDTH * LH / ((FD / 2)*(FD / 2) * 3.14159) * ER|float %}

  
  PRINT_START BED={BED} EXTRUDER={EXTRUDER}
  
  G21 ; millimeter units
  G90 ; absolute XYZ
  M83 ; relative E
  SET_VELOCITY_LIMIT ACCEL={AR} ACCEL_TO_DECEL={DR}
  G92 E0
  M106 S0

  # draw framing lines
  {% if EF == 1 %} ; only frame if enabled
    G1 X{STARTX} Y{STARTY} F{MS}      ; move to start position
    G1 Z{LH} F{ZS}                    ; move to layer height
    G1 E{RD} F{RS}                    ; un-retract
    G1 Y{STARTY+(PA_STEPS*BL)} E{ERAT*(PA_STEPS*BL)*BE} F{SS}; print first frame line
    G1 X{STARTX+LINE_WIDTH}           ; shift over
    G1 Y{STARTY} E{ERAT*(PA_STEPS*BL)*BE} ; print first return frame line
    G1 E-{RD} F{RS}                   ; retract
    G1 X{STARTX+FL+(SL*2)} F{MS}      ; move to second line start
    G1 E{RD} F{RS}                    ; un-retract
    G1 Y{STARTY+(PA_STEPS*BL)} E{ERAT*(PA_STEPS*BL)*BE} F{SS}; print second frame line
    G1 X{STARTX+FL+(SL*2)-LINE_WIDTH} ; shift over
    G1 Y{STARTY} E{ERAT*(PA_STEPS*BL)*BE} ; print second return frame line
    G1 E-{RD} F{RS}                   ; retract
  {% endif %}

  # draw markers
  {% if EM == 1 %} ; only when markers enabled
    G1 X{STARTX+SL+FL} Y{STARTY-ML} F{MS} ; marker 1 start
    G1 E{RD} F{RS}                     ; un-retract
    G1 Y{STARTY} E{ERAT*ML} F{SS}      ; marker 1 end
    G1 E-{RD} F{RS}                    ; retract
    G1 X{STARTX+SL} Y{STARTY-ML} F{MS} ; marker 2 start
    G1 E{RD} F{RS}                     ; un-retract
    G1 Y{STARTY} E{ERAT*ML} F{SS}      ; marker 2 end
    G1 E-{RD} F{RS}                    ; retract
    G1 X{STARTX+SL} Y{STARTY+(PA_STEPS*BL)+ML} F{MS} ; marker 3 start
    G1 E{RD} F{RS}                     ; un-retract
    G1 Y{STARTY+(PA_STEPS*BL)} E{ERAT*ML} F{SS} ; marker 3 end
    G1 E-{RD} F{RS}                    ; retract
    G1 X{STARTX+SL+FL} Y{STARTY+(PA_STEPS*BL)+ML} F{MS} ; marker 4 start
    G1 E{RD} F{RS}                     ; un-retract
    G1 Y{STARTY+(PA_STEPS*BL)} E{ERAT*ML} F{SS} ; marker 4 end
    G1 E-{RD} F{RS}                    ; retract
  {% endif %}

  # draw the actual test lines
  {% for i in range(0, PA_STEPS+1) %}
    {% set PA_VAL = PA_START + (i * PA_STEP) %}
    SET_PRESSURE_ADVANCE ADVANCE={PA_VAL}   ; set Pressure Advance
    M117 PA={PA_VAL}, STEP={PA_STEP}.
    G1 X{STARTX} Y{STARTY+(BL*i)} F{MS}                       ; move to start position
    G1 Z{LH} F{ZS}                                            ; move to layer height
    G1 E{RD} F{RS}                                            ; un-retract
    G1 X{(STARTX+SL)} Y{STARTY+(BL*i)} E{ERAT*SL} F{SS}       ; print line part one
    G1 X{(STARTX+SL+FL)} Y{STARTY+(BL*i)} E{ERAT*FL} F{FS}    ; print line part two
    G1 X{(STARTX+SL+FL+SL)} Y{STARTY+(BL*i)} E{ERAT*SL} F{SS} ; print line part three
    G1 E-{RD} F{RS}                                           ; retract
    G1 Z{LH*2} F{ZS}                                          ; move above layer height    
  {% endfor %}

  # draw pa value labels
  {% if PV == 1 %}
    {% for i in range(0, PA_STEPS+1) %}
      {% if i is divisibleby(((PH+1)/BL)|round(0,'ceil')|int) %}
      {% set PA_VAL = PA_START + (i * PA_STEP) %}
      SET_PRESSURE_ADVANCE ADVANCE={PA_VAL} ; set Pressure Advance
      M117 PA={PA_VAL}, STEP={PA_STEP}
      G1 X{STARTX+FL+(SL*2)+PX} Y{STARTY+(BL*i)} F{MS}          ; move to label position
      {% for a in PP|format(PA_VAL) %}                          ; convert float to string with specified precision
        G1 Z{LH} F{ZS}                                          ; move to layer height
        G91 ; relative positioning
        {% if a == "." %}
          G1 Y-{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y{0.5*PX} E{ERAT*(0.5*PX)}
          G1 X{0.5*PX} E{ERAT*(0.5*PX)}
          G1 Y-{0.5*PX} E{ERAT*(0.5*PX)}
          G1 X-{0.5*PX} E{ERAT*(0.5*PX)}
          G1 E-{RD} F{RS}        ; retract
          G1 X{1.5*PX} Y{2*PX} F{MS}
        {% elif a == "0" %}
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 Y{4*PX} E{ERAT*4*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{3*PX} Y-{2*PX} F{MS}
        {% elif a == "1" %}
          G1 X{PX} Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y-{4*PX} E{ERAT*4*PX} F{SS}
          G1 E-{RD} F{RS}        ; retract
          G1 X{2*PX} Y{2*PX} F{MS}
        {% elif a == "2" %}
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{2*PX} E{ERAT*2*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 Y-{2*PX} E{ERAT*2*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} Y{2*PX} F{MS}
        {% elif a == "3" %}
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X{2*PX} E{ERAT*2*PX} F{SS}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} F{MS}
        {% elif a == "4" %}
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y-{2*PX} E{ERAT*2*PX} F{SS}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y{2*PX} F{MS}
          G1 Y-{4*PX} E{ERAT*4*PX} F{SS}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} Y{2*PX} F{MS}
        {% elif a == "5" %}
          G1 X{2*PX} Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X-{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{2*PX} E{ERAT*2*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y-{2*PX} E{ERAT*2*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{3*PX} Y{2*PX} F{MS}
        {% elif a == "6" %}
          G1 X{2*PX} Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X-{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y{2*PX} E{ERAT*2*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{3*PX} F{MS}
        {% elif a == "7" %}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y{2*PX} E{ERAT*2*PX} F{SS}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} Y{2*PX} F{MS}
        {% elif a == "8" %}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y{2*PX} E{ERAT*2*PX} F{SS}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 Y{2*PX} E{ERAT*2*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} F{MS}
        {% elif a == "9" %}
          G1 X{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X-{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y{2*PX} E{ERAT*2*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{3*PX} Y{2*PX} F{MS}
        {% endif %}
        G90                      ; absolute positioning
        G1 Z{LH*2} F{ZS}         ; move above layer height
      {% endfor %}

      {% if DU == 1 %} ; if draw_underline is enabled
        G1 X{STARTX+FL+(SL*2)+(PX*2)+(PP|format(PA_VAL)|length-1)*(PX*3)} Y{STARTY+(BL*i)-(PX*2)-(LINE_WIDTH*(1-UO))} F{MS} ; move to underline position
        G1 Z{LH} F{ZS}           ; move to layer height
        G1 E{RD} F{RS}           ; un-retract
        G1 X{STARTX+FL+(SL*2)} E{ERAT*((PX*2)+(PP|format(PA_VAL)|length-1)*(PX*3))*BE} F{SS} ; draw underline
        {% if i == 0 %} ; connect first underline to the frame
          G1 Y{STARTY} E{ERAT*((PX*2)+(LINE_WIDTH*(1-UO)))*BE} F{SS}
        {% endif %}
        G1 E-{RD} F{RS}          ; retract
      {% endif %}
      {% endif %}
    {% endfor %}
  {% endif %}

  PRINT_END

  # these may not work, in which case you will need to count and do the math yourself!
  #M117 New PA = ({PA_START} + (bestLine * {PA_STEP}) )
  M117 Pick your best line and use the printed value.
  {action_respond_info ("Pick your best line and use the printed value.")}

  #------------------------------------------------------------------------

  [gcode_macro SEARCH_VARS]
#
# SEARCH_VARS
#
# Dump the printer object so you can find variables of interest
#
description: Dump the printer object to the console
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

#------------------------------------------------------------------------

[gcode_macro SET_PA]
#
# SET_PA
#
#   Use SET_PA to set pressure advance for a particular matieral, nozzle size, and printer.
#   This lets you use just one filament profile for each material no matter how many printers you have!
#
#   Use this in your SuperSlicer Custom G-code Start G-code for Filament:
#
#   	SET_PA MATERIAL=[filament_type] NOZZLE={nozzle_diameter[0]} PRINTER={tool_name[0]}
#
#   This requires having 
#   	- [filament_type] set in Filament Settings > Filament > Filament Properties > Filament type
#   	- [nozzle_diameter] set in Printer Settings > Extruder 1 > Name and Size > Nozzle diameter
#   	- [tool_name] set in Printer Settings > Extruder 1 > Name and Size > Tool name
#
description: Sets pressure advance from a filament profile table
gcode:
    {% set MATERIAL = params.MATERIAL|default("material") %}
    {% set NOZZLE = params.NOZZLE|default("nozzle") %}
    {% set PRINTER = params.PRINTER|default("printer") %}

    {% set PA_VAL = 0 %}

    {action_respond_info ("MATERIAL=%s NOZZLE=%s PRINTER=%s" % ( MATERIAL , NOZZLE ,PRINTER)) }

    {% if PRINTER == 'V2' %}
        {% if NOZZLE == "0.25" %}
            {% if MATERIAL == "PLA" %}
                {% set PA_VAL = 0.0515 %}
            {% elif MATERIAL == "PETG" %}
                {% set PA_VAL = 0.053000 %}
            {% endif %}
        {% elif NOZZLE == "0.4" %}
            {% if MATERIAL == "PLA" %}
                {% set PA_VAL = 0.0300 %}
            {% elif MATERIAL == "ASA" %}
                {% set PA_VAL = 0.0280 %}
            {% elif MATERIAL == "PETG" %}
                {% set PA_VAL = 0.035250 %}
            {% elif MATERIAL == "ABS" %}
                {% set PA_VAL = 0.028000 %}
            {% endif %}
        {% elif NOZZLE == "0.6" %}
            {% if MATERIAL == "PLA" %}
                {% set PA_VAL = 0.0200 %}
            {% elif MATERIAL == "ASA" %}
                {% set PA_VAL = 0.0201 %}
            {% elif MATERIAL == "PETG" %}
                {% set PA_VAL = 0.02950 %}
            {% elif MATERIAL == "ABS" %}
                {% set PA_VAL = 0.02500 %}
            {% endif %}
        {% elif NOZZLE == "0.8" %}
            {% if MATERIAL == "PLA" %}
                {% set PA_VAL = 0.0120 %} 
            {% elif MATERIAL == "PETG" %}
                {% set PA_VAL = 0.02275 %}
            {% elif MATERIAL == "ABS" %}
                {% set PA_VAL = 0.0175 %}
            {% endif %}
        {% endif %}
    {% elif PRINTER == 'V0' %}
        {% if NOZZLE == "0.4" %}
            {% if MATERIAL == "PLA" %}
                {% set PA_VAL=0.0450 %}
            {% elif MATERIAL == "PETG" %}
                {% set PA_VAL = 0.07585 %}
            {% endif %}
        {% endif %}
    {% endif %}

    SET_PRESSURE_ADVANCE ADVANCE={PA_VAL}

#------------------------------------------------------------------------

[gcode_macro TEST_SPEED]
#
# TEST_SPEED
# 
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
description: Perform a speed test SPEED=300 ACCEL=5000 ITERATIONS=10
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

#------------------------------------------------------------------------

[gcode_macro UNLOAD_FILAMENT]
#
# UNLOAD_FILAMENT
#
# Heat the nozzle to 230Â°C then retract the filament out of the toolhead
#
description: Heat the nozzle (if needed), then retract the filament out of the toolhead
gcode:
  {% if printer[printer.toolhead.extruder].temperature < 230 %}
    STATUS_HEATING
    M117 Heating hotend...
    SET_HEATER_TEMPERATURE HEATER='extruder' TARGET=230
    TEMPERATURE_WAIT SENSOR='extruder' MINIMUM=230
  {% endif %}
  STATUS_BUSY
  M117 Unloading filament...
  M83                            ; set extruder to relative
  G1 E2 F300                    ; extrude a little to soften tip
  G1 E-80 F1800                 ; retract filament completely
  M82                            ; set extruder to absolute
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  STATUS_READY

#------------------------------------------------------------------------

